{"ast":null,"code":"const RENDER_DELAY = 100;\nconst gameUpdates = [];\nlet gameStart = 0;\nlet firstServerTimestamp = 0;\nexport function initState() {\n  gameStart = 0;\n  firstServerTimestamp = 0;\n}\nexport function processGameUpdate(update) {\n  if (!firstServerTimestamp) {\n    firstServerTimestamp = update.t;\n    gameStart = Date.now();\n  }\n  gameUpdates.push(update);\n  const base = getBaseUpdate();\n  if (base > 0) {\n    gameUpdates.splice(0, base);\n  }\n}\nfunction currentServerTime() {\n  return firstServerTimestamp + (Date.now() - gameStart) - RENDER_DELAY;\n}\nfunction getBaseUpdate() {\n  const serverTime = currentServerTime();\n  for (let i = gameUpdates.length - 1; i >= 0; i--) {\n    if (gameUpdates[i].t <= serverTime) {\n      return i;\n    }\n  }\n  return -1;\n}\nexport function getCurrentState() {\n  if (!firstServerTimestamp) {\n    return {};\n  }\n  const base = getBaseUpdate();\n  const serverTime = currentServerTime();\n  // If base is the most recent update we have, use its state.\n  // Otherwise, interpolate between its state and the state of (base + 1).\n  if (base < 0 || base === gameUpdates.length - 1) {\n    return gameUpdates[gameUpdates.length - 1];\n  } else {\n    const baseUpdate = gameUpdates[base];\n    const next = gameUpdates[base + 1];\n    const ratio = (serverTime - baseUpdate.t) / (next.t - baseUpdate.t);\n    console.log(ratio);\n    return {\n      me: interpolateObject(baseUpdate.me, next.me, ratio),\n      others: interpolateObjectArray(baseUpdate.others, next.others, ratio),\n      lines: baseUpdate.lines,\n      remainders: baseUpdate.remainders,\n      usernames: baseUpdate.usernames\n    };\n  }\n}\nfunction interpolateObject(object1, object2, ratio) {\n  if (!object2) {\n    return object1;\n  }\n  const interpolated = {};\n  Object.keys(object1).forEach(key => {\n    if (key === 'coordinates') {\n      interpolated[key] = interpolateObjectArray(object1[key], object2[key], ratio);\n    } else if (key === 'x' || key === 'y') {\n      interpolated[key] = object1[key] + (object2[key] - object1[key]) * ratio;\n    } else if (key === 'color' || key === 'radius') {\n      interpolated[key] = object1[key];\n    } else {\n      interpolated[key] = interpolateObject(object1[key], object2[key], ratio);\n    }\n  });\n  return interpolated;\n}\nfunction interpolateObjectArray(objects1, objects2, ratio) {\n  let arr = [];\n  for (let i = 0; i < objects1.length; i++) {\n    arr.push(interpolateObject(objects1[i], objects2[i], ratio));\n  }\n  return arr;\n}","map":{"version":3,"names":["RENDER_DELAY","gameUpdates","gameStart","firstServerTimestamp","initState","processGameUpdate","update","t","Date","now","push","base","getBaseUpdate","splice","currentServerTime","serverTime","i","length","getCurrentState","baseUpdate","next","ratio","console","log","me","interpolateObject","others","interpolateObjectArray","lines","remainders","usernames","object1","object2","interpolated","Object","keys","forEach","key","objects1","objects2","arr"],"sources":["/home/edi/secario.fun/frondend/src/services/state.js"],"sourcesContent":["const RENDER_DELAY = 100;\n\nconst gameUpdates = [];\nlet gameStart = 0;\nlet firstServerTimestamp = 0;\n\nexport function initState() {\n  gameStart = 0;\n  firstServerTimestamp = 0;\n}\n\nexport function processGameUpdate(update) {\n  if (!firstServerTimestamp) {\n    firstServerTimestamp = update.t;\n    gameStart = Date.now();\n  }\n  gameUpdates.push(update);\n  const base = getBaseUpdate();\n  if (base > 0) {\n    gameUpdates.splice(0, base);\n  }\n}\n\nfunction currentServerTime() {\n  return firstServerTimestamp + (Date.now() - gameStart) - RENDER_DELAY;\n}\n\n\nfunction getBaseUpdate() {\n  const serverTime = currentServerTime();\n  for (let i = gameUpdates.length - 1; i >= 0; i--) {\n    if (gameUpdates[i].t <= serverTime) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n\nexport function getCurrentState() {\n  if (!firstServerTimestamp) {\n    return {};\n  }\n  const base = getBaseUpdate();\n  const serverTime = currentServerTime();\n  // If base is the most recent update we have, use its state.\n  // Otherwise, interpolate between its state and the state of (base + 1).\n  if (base < 0 || base === gameUpdates.length - 1) {\n    return gameUpdates[gameUpdates.length - 1];\n  } else {\n    const baseUpdate = gameUpdates[base];\n    const next = gameUpdates[base + 1];\n    const ratio = (serverTime - baseUpdate.t) / (next.t - baseUpdate.t);\n    console.log(ratio)\n    return {\n      me: interpolateObject(baseUpdate.me, next.me, ratio),\n      others: interpolateObjectArray(baseUpdate.others, next.others, ratio),\n      lines: baseUpdate.lines,\n      remainders: baseUpdate.remainders,\n      usernames: baseUpdate.usernames\n    };\n  }\n}\n\nfunction interpolateObject(object1, object2, ratio) {\n  if (!object2) {\n    return object1;\n  }\n\n  const interpolated = {};\n  Object.keys(object1).forEach(key => {\n    if (key === 'coordinates') {\n      interpolated[key] = interpolateObjectArray(object1[key], object2[key], ratio)\n    }\n    else if (key === 'x' || key === 'y') {\n      interpolated[key] = object1[key] + (object2[key] - object1[key]) * ratio;\n    }\n    else if (key === 'color' || key === 'radius') {\n      interpolated[key] = object1[key];\n\n    }\n    else {\n      interpolated[key] = interpolateObject(object1[key], object2[key], ratio)\n    }\n  });\n  return interpolated;\n}\n\nfunction interpolateObjectArray(objects1, objects2, ratio) {\n\n  let arr = [];\n  for (let i = 0; i < objects1.length; i++) {\n    arr.push(interpolateObject(objects1[i], objects2[i], ratio))\n  }\n  return arr;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}